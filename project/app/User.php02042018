<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Notifications\ResetPassword as ResetPasswordNotification;

use DB;

use App\UserFriend;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'id', 'first_name', 'last_name', 'email', 'password', 'date_of_birth',
        'gender', 'location' , 'latitude', 'longitude', 'is_terms_accepted',
        'cover_picture','cover_picture_small', 'profile_picture','profile_picture_small', 'about_me', 'phone', 'privacy_scope','username','reset_verification_token'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * Boot the model.
     *
     * @return void
     */
    public static function boot()
    {
        parent::boot();

        static::creating(function ($user) {
            $user->api_token = create_api_token($user);
            $user->is_email_verified = "N";
            $user->email_verification_token = create_api_token($user);
            $user->is_active = "N";            
        });
    }

    /**
     * Confirm the user.
     *
     * @return void
     */
    public function confirmEmail()
    {
        $this->is_active = "Y";
        $this->is_email_verified = "Y";
        $this->email_verification_token = null;
        $this->save();
        //return $this;
    }

    public function getUniqueUsername()
    {
        $username = $this->first_name.str_random(5);
        return $username;
    }

    public function sendPasswordResetNotification($token)
    {
        $this->reset_verification_token = $token;
        $this->save();
        $this->notify(new ResetPasswordNotification($token));
        
    }

    public function scopeSuggestedFriends($query)
    {
        //DB::enableQueryLog();
        $latitude = $this->latitude;
        $longitude = $this->longitude;
        $distance = 15;

        $user_friends = self::userFriends()->whereIn('is_accepted', [1,3])
                        ->orWhere('is_blocked', 1)/* whom you blocked*/
                        ->get()->pluck('friend_id')->toArray();
        
        /* who blocked you*/
        $user_blocked_you = UserFriend::where('friend_id', '=', $this->id)
                            ->where('is_blocked', 1)
                            ->get()->pluck('user_id')->toArray();
        
        $user_friends = array_merge($user_friends, $user_blocked_you);

        
        $query->with(['userAcceptedFriendRequests' => function ($query) {
                //$query->where('user_id', '=', $this->id);
            }])
            ->whereHas('self', function($query) use($latitude, $longitude, $distance) {
                $query->havingRaw("SQRT( POW(69.1 * (latitude - ".$latitude."), 2) + POW(69.1 * (".$longitude."- longitude) * COS(latitude / 57.3), 2)) <=$distance");
            })
            ->where('id', '!=', $this->id)
            ->where('is_active' , "=" , 'Y');
        if (count($user_friends) > 0)
        {
            $query->whereNotIn('id', $user_friends);
        }
            
            
        //$query->get();
        //dd($query->toSql());
        //dd(DB::getQueryLog());
        return $query;
    }
    public function scopeSuggestedFriendsWithoutDistance($query)
    {
        //DB::enableQueryLog();

        $user_friends = self::userFriends()->whereIn('is_accepted', [1,3])
                        ->orWhere('is_blocked', 1)/* whom you blocked*/
                        ->get()->pluck('friend_id')->toArray();
        
        /* who blocked you*/
        $user_blocked_you = UserFriend::where('friend_id', '=', $this->id)
                            ->where('is_blocked', 1)
                            ->get()->pluck('user_id')->toArray();
        
        $user_friends = array_merge($user_friends, $user_blocked_you);

        
        $query->with(['userAcceptedFriendRequests' => function ($query) {
                //$query->where('user_id', '=', $this->id);
            }])           
            ->where('id', '!=', $this->id)
            ->where('is_active' , "=" , 'Y');
        if (count($user_friends) > 0)
        {
            $query->whereNotIn('id', $user_friends);
        }
            
            
        //$query->get();
        //dd($query->toSql());
        //dd(DB::getQueryLog());
        return $query;
    }

    //public function buid
    public function self()
    {
        return $this->belongsTo('App\User', 'id', 'id');
    }
    public function scopeActiveUsers($query)
    {
        return $query->where('is_active' , "=" , 'Y');
    }
    public function scopeGetUserByUsername($query, $username)
    {
        $query->with(['userAcceptedFriendRequests' => function ($query) {
                    $query->select('user_id','friend_id');/*to use select relation key must be present*/
                }])
                ->with(['userFriendRequests' => function ($query) {
                    $query->select('user_id','friend_id');
                }])
                ->where('is_active', "=", 'Y')
                ->where('username', '=' , $username);

        return $query;
    }
    /**
     * Get the experiences record lists associated with the user.
     * $this->hasMany('App\Experience', 'foreign_key', 'local_key')
     */
    public function experiences()
    {
        return $this->hasMany('App\Experience', 'user_id', 'id');
    }

    /**
     * Get the educations record lists associated with the user.
     * $this->hasMany('App\Education', 'foreign_key', 'local_key')
     */
    public function educations()
    {
        return $this->hasMany('App\Education', 'user_id', 'id');
    }
    /**
     * Get the friends record lists associated with the user.
     * $this->hasMany('App\Education', 'foreign_key', 'local_key')
     */
    public function userFriends()
    {
        return $this->hasMany('App\UserFriend', 'user_id', 'id');
    }
    public function userAcceptedFriendRequests()
    {
        return $this->userFriends()->where('is_accepted', '=', 1);
    }
    public function userFriendRequests()
    {
        return $this->userFriends()->where('is_accepted', '=', 3)->where('is_requested', '=', 0);
    }

    


}
